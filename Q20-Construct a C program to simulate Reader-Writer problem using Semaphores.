#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, wrt;
int readCount = 0;

void* reader(void* arg) {
    int id = *(int*)arg;
    sem_wait(&mutex);
    readCount++;
    if (readCount == 1)
        sem_wait(&wrt); // First reader locks writer
    sem_post(&mutex);

    printf("Reader %d is reading...\n", id);
    sleep(1); // Simulate reading

    sem_wait(&mutex);
    readCount--;
    if (readCount == 0)
        sem_post(&wrt); // Last reader unlocks writer
    sem_post(&mutex);
    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;
    sem_wait(&wrt); // Writer locks access
    printf("Writer %d is writing...\n", id);
    sleep(2); // Simulate writing
    sem_post(&wrt); // Writer unlocks access
    return NULL;
}

int main() {
    pthread_t r[3], w[2];
    int rID[3] = {1, 2, 3}, wID[2] = {1, 2};

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    pthread_create(&r[0], NULL, reader, &rID[0]);
    pthread_create(&w[0], NULL, writer, &wID[0]);
    pthread_create(&r[1], NULL, reader, &rID[1]);
    pthread_create(&r[2], NULL, reader, &rID[2]);
    pthread_create(&w[1], NULL, writer, &wID[1]);

    for (int i = 0; i < 3; i++) pthread_join(r[i], NULL);
    for (int i = 0; i < 2; i++) pthread_join(w[i], NULL);

    sem_destroy(&mutex);
    sem_destroy(&wrt);
    return 0;
}
