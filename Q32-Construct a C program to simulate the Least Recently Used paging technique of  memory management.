#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int main() {
    int pages[MAX_PAGES], frames[MAX_FRAMES], age[MAX_FRAMES];
    int n, f, i, j, k, page_faults = 0, found, lru_index;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter page reference string:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &f);

    // Initialize frames and age
    for (i = 0; i < f; i++) {
        frames[i] = -1;
        age[i] = 0;
    }

    printf("\nPage\tFrames\n");

    for (i = 0; i < n; i++) {
        found = 0;

        // Check if page is already in frame
        for (j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                age[j] = 0;  // Reset age since it's recently used
            } else if (frames[j] != -1) {
                age[j]++;    // Increment age for other pages
            }
        }

        // If not found, replace LRU page
        if (!found) {
            lru_index = 0;
            for (j = 1; j < f; j++) {
                if (age[j] > age[lru_index]) {
                    lru_index = j;
                }
            }

            frames[lru_index] = pages[i];
            age[lru_index] = 0;
            page_faults++;
        }

        // Print current frame status
        printf("%d\t", pages[i]);
        for (k = 0; k < f; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults = %d\n", page_faults);
    return 0;
}
