#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int findOptimal(int pages[], int frames[], int n, int f, int current) {
    int index = -1, farthest = current;
    for (int i = 0; i < f; i++) {
        int j;
        for (j = current + 1; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == n) return i; // Not used again
    }
    return (index == -1) ? 0 : index;
}

int main() {
    int pages[MAX_PAGES], frames[MAX_FRAMES];
    int n, f, i, j, k, page_faults = 0, found;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter page reference string:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &f);

    for (i = 0; i < f; i++) frames[i] = -1;

    printf("\nPage\tFrames\n");

    for (i = 0; i < n; i++) {
        found = 0;

        for (j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            int replace_index;
            if (i < f) {
                replace_index = i;
            } else {
                replace_index = findOptimal(pages, frames, n, f, i);
            }
            frames[replace_index] = pages[i];
            page_faults++;
        }

        printf("%d\t", pages[i]);
        for (k = 0; k < f; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults = %d\n", page_faults);
    return 0;
}
